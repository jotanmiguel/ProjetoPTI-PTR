---
openapi: 3.0.3
info:
  title: Mercado Online
  description: "API da Loja10 para o projeto das cadeiras de PGP, PTI e PTR do Grupo 10.\nAutores:\nDaniela Farinha, Diogo Esteves, João Ascenso, João Oliveira e Miguel Faísco.   "
  contact:
    name: João Oliveira
    email: fc56908@alunos.ciencias.ulisboa.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.0
servers:
- url: https://virtserver.swaggerhub.com/PTR010/MercadoOnline/0.1.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/jotanmiguel/Loja/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
tags:
- name: Products
  description: Endpoints for managing products in the store
- name: Orders
  description: Endpoints for managing orders in the store
- name: Store
  description: Endpoints for managing the store
- name: User
  description: Endpoints for managing users in the store
paths:
  /products:
    get:
      tags:
      - Products
      summary: Get all products
      description: Returns all products from the system.
      operationId: getProducts
      parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: An paged array of products
        "400":
          description: Bad input parameter
    put:
      tags:
      - Products
      summary: Update an existing product
      operationId: updateProduct
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "405":
          description: Validation exception
      security:
      - petstore_auth:
        - write:products
        - read:products
    post:
      tags:
      - Products
      summary: Add a new produtct to the store
      operationId: addProduct
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:produtcs
        - read:products
  /products/findByCategories:
    get:
      tags:
      - Products
      summary: Finds Products by categories
      description: Muliple categories can be provided with comma separated strings.
      operationId: findProductByCategories
      parameters:
      - name: categories
        in: query
        description: Categories to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid category value
      security:
      - petstore_auth:
        - write:products
        - read:products
  /products/findByName:
    get:
      tags:
      - Products
      summary: Find product by name
      description: Returns all products with the given name.
      operationId: findProductsByName
      parameters:
      - name: name
        in: query
        description: Name of the products to search for
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid name supplied
        "404":
          description: Products not found
  /product/{productId}:
    get:
      tags:
      - Product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
    put:
      tags:
      - Product
      summary: Update an existing product
      operationId: updateProductWithForm
      parameters:
      - name: productId
        in: path
        description: ID of product that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - Product
      summary: Deletes a product by ID
      operationId: deleteProduct
      parameters:
      - name: productId
        in: path
        description: Product id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
  /product/{productId}/uploadImage:
    post:
      tags:
      - Product
      summary: Uploads an image of the product.
      operationId: uploadFile
      parameters:
      - name: productId
        in: path
        description: ID of product to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "405":
          description: Validation exception
  /orders:
    get:
      tags:
      - Orders
      summary: Get all orders
      description: Returns all orders from the system.
      operationId: getOrders
      responses:
        "200":
          description: An paged array of orders
        "400":
          description: Bad input parameter
  /orders/{orderId}:
    get:
      tags:
      - Orders
      summary: Find purchase order by ID
      description: Find purchase order by ID
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    put:
      tags:
      - Orders
      summary: Update an existing order
      operationId: updateOrder
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        "405":
          description: Validation exception
    delete:
      tags:
      - Orders
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /store/inventory:
    get:
      tags:
      - Store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /store/order:
    post:
      tags:
      - Store
      summary: Place an order for a product
      operationId: placeOrder
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid Order
  /user:
    post:
      tags:
      - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /user/createWithArray:
    post:
      tags:
      - User
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - User
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - User
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - User
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - User
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        proudctId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Product:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: product status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Product
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    product_productId_body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the product
        status:
          type: string
          description: Updated status of the product
  requestBodies:
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:products: modify products in your account
            read:products: read your products
    api_key:
      type: apiKey
      name: api_key
      in: header
